"""
–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

–û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:
1. –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø —Å API.
2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã –∏ –≥—Ä—É–ø–ø—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
3. –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã.
4. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏ –ø–∞—Ä (—É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∏ –≤—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö) –≤ —Ç–∞–±–ª–∏—Ü–µ Lesson.
5. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
6. –í–µ—Å—Ç–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —à–∞–≥–æ–≤, –æ—à–∏–±–æ–∫ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.

–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
- TimetableClient (app/fetcher.py): –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è API —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
- extract_lessons_from_timetable_json (app/parser.py): –ø–∞—Ä—Å–µ—Ä JSON-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π.
- AsyncSessionLocal (app/db.py): —Ñ–∞–±—Ä–∏–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π SQLAlchemy.
- SQLAlchemy –º–æ–¥–µ–ª–∏: Faculty, Group, Lesson, TimeSlot, WeekMarkEnum.
"""
import asyncio
import logging
from typing import List, Set

from app.keyboards.init_keyboards import refresh_all_keyboards
from app.utils.schedule.fetcher import TimetableClient
from app.utils.schedule.parser import extract_lessons_from_timetable_json, extract_professor_names
from app.database.db import AsyncSessionLocal
from app.database.models import Faculty, Group, Lesson, Professor, ProfessorLesson
from sqlalchemy import select, delete, case
from sqlalchemy.ext.asyncio import AsyncSession

from app.utils.schedule.search_professors import get_cached_professors

logger = logging.getLogger(__name__)


CACHE_UPDATE_ENABLED = True
_cache_lock = asyncio.Lock()


async def ensure_faculty_and_group(session: AsyncSession, faculty_name: str, group_name: str):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –∏ –≥—Ä—É–ø–ø—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

    –õ–æ–≥–∏–∫–∞:
    - –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω faculty_name, –∏—â–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –≤ –±–∞–∑–µ, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º.
    - –ò—â–µ–º –≥—Ä—É–ø–ø—É –ø–æ group_name, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É.
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è await session.flush() —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å id –¥–ª—è —Å–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        session (AsyncSession): –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
        faculty_name (str): –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞.
        group_name (str): –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        Group: –æ–±—ä–µ–∫—Ç –≥—Ä—É–ø–ø—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """

    faculty = None
    if faculty_name:
        q = await session.execute(select(Faculty).where(Faculty.name == faculty_name))
        faculty = q.scalars().first()
        if not faculty:
            faculty = Faculty(name=faculty_name)
            session.add(faculty)
            await session.flush()

    q = await session.execute(select(Group).where(Group.group_name == group_name))
    group = q.scalars().first()
    if not group:
        group = Group(group_name=group_name, faculty_id=faculty.id if faculty else None)
        session.add(group)
        await session.flush()
    return group


async def delete_group_if_exists(session, group_name: str):
    """
    –£–¥–∞–ª—è–µ—Ç –≥—Ä—É–ø–ø—É –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ–π –ø–∞—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        session (AsyncSession): –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
        group_name (str): –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.

    –õ–æ–≥–∏–∫–∞:
    1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ –∏–º–µ–Ω–∏.
    2. –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ Lesson, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ–π.
    3. –£–¥–∞–ª—è–µ—Ç —Å–∞–º—É –≥—Ä—É–ø–ø—É.
    4. –§–∏–∫—Å–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ commit().
    """

    q = await session.execute(select(Group).where(Group.group_name == group_name))
    group = q.scalars().first()
    if not group:
        return False

    logger.info("–£–¥–∞–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –±–µ–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: %s", group_name)
    await session.execute(delete(Lesson).where(Lesson.group_id == group.id))
    await session.delete(group)
    await session.commit()
    return True


async def upsert_lessons_for_group(session: AsyncSession, group_obj: Group, records: List[dict]):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã.

    –õ–æ–≥–∏–∫–∞:
    - –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è—é—Ç—Å—è —Å—Ç–∞—Ä–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.
    - –í—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ records.
    - week_mark –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ (None, 'every', 'plus', 'minus').

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        session (AsyncSession): –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
        group_obj (Group): –æ–±—ä–µ–∫—Ç –≥—Ä—É–ø–ø—ã.
        records (List[dict]): —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞—Ä–∞—Ö.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        int: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ä.
    """
    if not records:
        return 0

    type_name = records[0].get("type")

    try:
        await session.execute(
            delete(Lesson)
            .where(Lesson.group_id == group_obj.id)
            .where(Lesson.type == type_name)
        )
        await session.flush()

        count = 0
        for rec in records:
            lesson = Lesson(
                group_id=group_obj.id,
                weekday=rec.get("weekday"),
                lesson_number=rec.get("lesson_number"),
                subject=rec.get("subject"),
                professors=rec.get("professors"),
                rooms=rec.get("rooms"),
                week_mark=rec.get("week_mark"),
                type=rec.get("type"),
            )
            session.add(lesson)
            count += 1

        return count

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä –¥–ª—è –≥—Ä—É–ø–ø—ã group_id = {group_obj.id}: {e}")
        await session.rollback()
        raise


async def upsert_lessons_for_professors(session: AsyncSession):
    """
    –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∞–±–ª–∏—Ü—ã Lesson.

    –õ–æ–≥–∏–∫–∞:
    1. –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –≤ professor_lessons.
    2. –ü—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º Lesson.
    3. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ —Å—Ç—Ä–æ–∫–µ —Å–æ–∑–¥–∞—ë—Ç (–∏–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç) Professor.
    4. –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –ø–∞—Ä—ã –±–µ–∑ –¥—É–±–ª–µ–π.
    """

    try:
        logger.info("üîÑ –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π...")

        await session.execute(delete(ProfessorLesson))

        result = await session.execute(select(Lesson))
        lessons = result.scalars().all()

        professors_cache: dict[str, int] = {}  # –∏–º—è -> id
        added_records: set[tuple[int, int, int, str, str, str]] = set()  # –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–µ–π

        for lesson in lessons:
            professors_text = (lesson.professors or "").strip()
            if not professors_text:
                continue

            professor_names = extract_professor_names(professors_text)

            if not professor_names:
                continue

            for prof_name in professor_names:
                prof_id = professors_cache.get(prof_name)
                if not prof_id:
                    res = await session.execute(select(Professor).where(Professor.name == prof_name))
                    professor = res.scalar_one_or_none()
                    if not professor:
                        professor = Professor(name=prof_name)
                        session.add(professor)
                        await session.flush()
                    prof_id = professor.id
                    professors_cache[prof_name] = prof_id

                # –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–µ–π
                key = (
                    prof_id,
                    lesson.weekday,
                    lesson.lesson_number,
                    lesson.subject,
                    lesson.rooms,
                    lesson.week_mark,
                )
                if key in added_records:
                    continue
                added_records.add(key)

                pl = ProfessorLesson(
                    professor_id=prof_id,
                    weekday=lesson.weekday,
                    lesson_number=lesson.lesson_number,
                    subject=lesson.subject,
                    rooms=lesson.rooms,
                    week_mark=lesson.week_mark,
                )
                session.add(pl)

        await session.flush()
        logger.info(f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(added_records)} –∑–∞–ø–∏—Å–µ–π.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {e}")
        await session.rollback()
        raise


async def run_full_sync(limit_groups: int = None, type_idx: int = 0):
    """
    –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –≥—Ä—É–ø–ø –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.

    1. –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –≥—Ä—É–ø–ø—ã –∏–∑ API.
    2. –î–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã:
       - —Å–æ–∑–¥–∞—ë—Ç —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –∏ –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç.
       - –ø–æ–ª—É—á–∞–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.
       - –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É Lesson.
    3. –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.
    4. –£–¥–∞–ª—è–µ—Ç –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.
    5. –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """

    global CACHE_UPDATE_ENABLED

    client = TimetableClient()

    try:
        async with AsyncSessionLocal() as session:
            groups_json = await client.fetch_groups()
            groups = groups_json.get("groups", []) if isinstance(groups_json, dict) else groups_json

            if not groups:
                logger.warning("–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç.")
                return

            valid_groups: Set[str] = set()

            for idx, g in enumerate(groups):
                if limit_groups and idx >= limit_groups:
                    break

                group_name = g.get("groupName")
                faculty_name = g.get("facultyName")
                if not group_name:
                    continue

                try:
                    group_obj = await ensure_faculty_and_group(session, faculty_name, group_name)

                    tt_json = await client.fetch_timetable_for_group(group_name, type_idx=type_idx)
                    if isinstance(tt_json, dict) and tt_json.get("message"):
                        logger.info("–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è %s: %s", group_name, tt_json.get("message"))
                        continue

                    records = extract_lessons_from_timetable_json(group_name, tt_json)
                    if not records:
                        logger.info("–î–ª—è –≥—Ä—É–ø–ø—ã %s –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", group_name)
                        continue

                    inserted = await upsert_lessons_for_group(session, group_obj, records)
                    valid_groups.add(group_name)

                    await session.commit()
                    logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ %s ‚Üí %d –ø–∞—Ä", group_name, inserted)

                except Exception as e:
                    await session.rollback()
                    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø—ã %s: %s", group_name, str(e))
                    continue

            # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            deleted_groups = 0
            try:
                q = await session.execute(select(Group))
                existing_groups = q.scalars().all()
                for grp in existing_groups:
                    if grp.group_name not in valid_groups:
                        deleted_groups += 1
                        await session.execute(delete(Lesson).where(Lesson.group_id == grp.id))
                        await session.delete(grp)
                        logger.info("–£–¥–∞–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –±–µ–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: %s", grp.group_name)

                await session.commit()

            except Exception as e:
                await session.rollback()
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø: %s", str(e))

            async with _cache_lock:
                CACHE_UPDATE_ENABLED = False

            try:
                await upsert_lessons_for_professors(session)
                await session.commit()

                deleted_profs = 0
                try:
                    q = await session.execute(select(Professor))
                    existing_profs = q.scalars().all()
                    for prof in existing_profs:
                        res = await session.execute(
                            select(ProfessorLesson).where(ProfessorLesson.professor_id == prof.id)
                        )
                        lessons_for_prof = res.scalars().all()
                        if not lessons_for_prof:
                            deleted_profs += 1
                            await session.delete(prof)
                            logger.info("–£–¥–∞–ª—ë–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –±–µ–∑ –ø–∞—Ä: %s", prof.name)

                    await session.commit()

                except Exception as e:
                    await session.rollback()
                    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: %s", str(e))

            except Exception as e:
                await session.rollback()
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: %s", str(e))

            finally:
                async with _cache_lock:
                    CACHE_UPDATE_ENABLED = True

    except Exception as e:
        logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: %s", str(e))
        raise

    finally:
        await client.close()

        await get_cached_professors()

    logger.info("‚úÖ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    logger.info("–ì—Ä—É–ø–ø —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º: %d (—É–¥–∞–ª–µ–Ω–æ: %d)", len(valid_groups), deleted_groups)
    logger.info("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: %d, —É–¥–∞–ª–µ–Ω–æ: %d", len(existing_profs) - deleted_profs, deleted_profs)

    await refresh_all_keyboards()


async def run_full_sync_for_faculty(faculty_name: str, limit_groups: int = None, type_idx: int = 0):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞.

    –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
    1. –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –∏–∑ API
    2. –§–∏–ª—å—Ç—Ä—É–µ—Ç –≥—Ä—É–ø–ø—ã –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É
    3. –î–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞:
        - –°–æ–∑–¥–∞–µ—Ç/–ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø–∏—Å—å –≥—Ä—É–ø–ø—ã –≤ –ë–î
        - –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ API
        - –ü–∞—Ä—Å–∏—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ë–î

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        faculty_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        limit_groups (int, optional): –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥—Ä—É–ø–ø –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        type_idx (int, optional): –¢–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
    """
    client = TimetableClient()
    async with AsyncSessionLocal() as session:
        groups_json = await client.fetch_groups()
        groups = groups_json.get("groups", []) if isinstance(groups_json, dict) else groups_json

        if not groups:
            logger.warning("–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç")
            await client.close()
            return 0

        faculty_groups = [g for g in groups if g.get("facultyName") == faculty_name]

        if not faculty_groups:
            logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø –¥–ª—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ %s", faculty_name)
            await client.close()
            return 0

        valid_groups: Set[str] = set()
        for idx, g in enumerate(faculty_groups):
            if limit_groups and idx >= limit_groups:
                break

            group_name = g.get("groupName")
            if not group_name:
                continue

            try:
                group_obj = await ensure_faculty_and_group(session, faculty_name, group_name)

                tt_json = await client.fetch_timetable_for_group(group_name, type_idx=type_idx)

                if isinstance(tt_json, dict) and tt_json.get("message"):
                    logger.info("–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è %s: %s", group_name, tt_json.get("message"))
                    continue

                records = extract_lessons_from_timetable_json(group_name, tt_json)

                inserted = await upsert_lessons_for_group(session, group_obj, records)
                await session.commit()

                valid_groups.add(group_name)
                logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ %s —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ %s -> –≤—Å—Ç–∞–≤–ª–µ–Ω–æ %d –ø–∞—Ä",
                            group_name, faculty_name, inserted)

            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø—ã %s —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ %s: %s",
                             group_name, faculty_name, e)
                await session.rollback()

            qf = await session.execute(select(Faculty).where(Faculty.name == faculty_name))
            faculty_obj = qf.scalars().first()

        q = await session.execute(select(Group).where(Group.faculty_id == faculty_obj.id))
        existing = q.scalars().all()
        for g in existing:
            if g.group_name not in valid_groups:
                logger.info("–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –±–µ–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: %s", g.group_name)
                await session.execute(delete(Lesson).where(Lesson.group_id == g.id))
                await session.delete(g)

        await session.commit()
        await client.close()

        total = len(valid_groups)
        logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è %s –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ì—Ä—É–ø–ø –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: %d",
                    faculty_name, total)

        await refresh_all_keyboards()

        return total


async def run_full_sync_for_group(group_name: str, type_idx: int = 0):
    """
    –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        group_name : str
            –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è.
        type_idx : int, optional (default=0)
            –ò–Ω–¥–µ–∫—Å —Ç–∏–ø–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ª–µ–∫—Ü–∏–∏/–ø—Ä–∞–∫—Ç–∏–∫–∏), –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ JSON.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        int
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö/–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
            –ï—Å–ª–∏ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0.

        –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏:
        1. –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç `TimetableClient` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
        2. –û—Ç–∫—Ä—ã–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (`AsyncSessionLocal`).
        3. –í –±–ª–æ–∫–µ try/finally:
            a. –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –∏ –≥—Ä—É–ø–ø–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –ë–î —á–µ—Ä–µ–∑ `ensure_faculty_and_group`.
            b. –ü–æ–ª—É—á–∞–µ–º JSON —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —á–µ—Ä–µ–∑ `client.fetch_timetable_for_group(group_name, type_idx)`.
            c. –ï—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–æ–º "message" ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0.
            d. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π —á–µ—Ä–µ–∑ `extract_lessons_from_timetable_json`.
            e. –í—Å—Ç–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä—ã –≤ –ë–î —á–µ—Ä–µ–∑ `upsert_lessons_for_group`.
            f. –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é `session.commit()`.
            g. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö/–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ä.
        4. –í –±–ª–æ–∫–µ finally –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ `TimetableClient`.
        """
    client = TimetableClient()
    async with AsyncSessionLocal() as session:
        try:
            groups_data = await client.fetch_groups()
            group_info = next(
                (g for g in groups_data.get("groups", []) if g["groupName"] == group_name),
                None
            )
            if not group_info:
                await delete_group_if_exists(session, group_name)
                return 0

            faculty_name = group_info["facultyName"]

            group_obj = await ensure_faculty_and_group(session, faculty_name, group_name)

            tt_json = await client.fetch_timetable_for_group(group_name, type_idx)
            if isinstance(tt_json, dict) and tt_json.get("message"):
                await delete_group_if_exists(session, group_name)
                return 0

            records = extract_lessons_from_timetable_json(group_name, tt_json)
            if not records:
                await delete_group_if_exists(session, group_name)
                return 0

            inserted = await upsert_lessons_for_group(session, group_obj, records)
            await session.commit()

            await refresh_all_keyboards()
            return inserted

        finally:
            await client.close()


async def get_schedule_for_group(group_name: str):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    ----------
    group_name : str
        –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    ----------
    List[Lesson]
        –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Lesson, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ.
        –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.

    –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏:
    --------------------
    1. –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
    2. –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ `Group`, —Ñ–∏–ª—å—Ç—Ä—É—è –ø–æ `group_name`.
    3. –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.
    4. –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–∞–π–¥–µ–Ω–∞:
        a. –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ `Lesson`, –≤—ã–±–∏—Ä–∞—è –ø–∞—Ä—ã —Å `group_id` —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –≥—Ä—É–ø–ø—ã.
        b. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã.
    """

    async with AsyncSessionLocal() as session:
        q = await session.execute(select(Group).where(Group.group_name == group_name))
        group = q.scalars().first()
        if not group:
            return []

        week_mark_order = case(
            (Lesson.week_mark == 'every', 1),
            (Lesson.week_mark == 'plus', 2),
            (Lesson.week_mark == 'minus', 3),
            else_=4
        )

        q = await session.execute(
            select(Lesson)
            .where(Lesson.group_id == group.id)
            .order_by(week_mark_order)
        )
        lessons = q.scalars().all()

        return lessons


async def get_lesson_for_professor(professor_name: str):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–∞—Ä—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏"""
    async with AsyncSessionLocal() as session:
        query = await session.execute(
            select(Professor).where(Professor.name.ilike(f"%{professor_name}%"))
        )
        professors = query.scalars().all()

        if not professors or len(professors) > 1:
            return None, professors

        professor = professors[0]

        query = await session.execute(
            select(ProfessorLesson)
            .where(ProfessorLesson.professor_id == professor.id)
            .order_by(ProfessorLesson.weekday, ProfessorLesson.lesson_number)
        )
        lessons = query.scalars().all()

        return professor, lessons