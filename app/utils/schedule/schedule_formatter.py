import re
from collections import defaultdict

MAX_MESSAGE_LENGTH = 4000

lesson_num_emoji = {
    0: "1Ô∏è‚É£", 1: "2Ô∏è‚É£", 2: "3Ô∏è‚É£",
    3: "4Ô∏è‚É£", 4: "5Ô∏è‚É£", 5: "6Ô∏è‚É£", 6: "7Ô∏è‚É£"
}

weekday_names = {
    1: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    2: "–í—Ç–æ—Ä–Ω–∏–∫",
    3: "–°—Ä–µ–¥–∞",
    4: "–ß–µ—Ç–≤–µ—Ä–≥",
    5: "–ü—è—Ç–Ω–∏—Ü–∞",
    6: "–°—É–±–±–æ—Ç–∞",
    7: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}

lessonTimeData = {
    0: {0: "08:30", 1: "10:05"},
    1: {0: "10:15", 1: "11:50"},
    2: {0: "12:10", 1: "13:45"},
    3: {0: "14:00", 1: "15:35"},
    4: {0: "15:55", 1: "17:30"},
    5: {0: "17:45", 1: "19:20"},
    6: {0: "19:30", 1: "21:00"}
}

url_pattern = re.compile(r"(https?://\S+)")


def escape_md_v2(text: str):
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã MarkdownV2.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        text (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        str: –¢–µ–∫—Å—Ç —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –æ–±—Ä–∞—Ç–Ω—ã–º–∏ —Å–ª—ç—à–∞–º–∏ –ø–µ—Ä–µ–¥ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏.
    """

    escape_chars = r"_*[]()~`>#+-=|{}.!\\"
    return ''.join(f'\\{c}' if c in escape_chars else c for c in text)


def _get_lesson_time(lesson_number):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –ø–∞—Ä—ã –ø–æ –µ—ë –Ω–æ–º–µ—Ä—É.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        lesson_number (int): –ù–æ–º–µ—Ä –ø–∞—Ä—ã (0‚Äì6).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        tuple[str, str]: (–≤—Ä–µ–º—è_–Ω–∞—á–∞–ª–∞, –≤—Ä–µ–º—è_–∫–æ–Ω—Ü–∞)
    """

    if lesson_number in lessonTimeData:
        lesson = lessonTimeData[lesson_number]
        return lesson[0], lesson[1]
    else:
        return "‚ùì‚ùì:‚ùì‚ùì", "‚ùì‚ùì:‚ùì‚ùì"


def _filter_lessons_by_week(lessons, week: str):
    """
    –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä –ø–æ —Ç–∏–ø—É –Ω–µ–¥–µ–ª–∏.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        lessons (list): –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Lesson.
        week (str): "plus" | "minus" | "full".
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        list: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π.
    """

    if week == "plus":
        return [l for l in lessons if l.week_mark in ("plus", "every", None)]
    elif week == "minus":
        return [l for l in lessons if l.week_mark in ("minus", "every", None)]
    else:
        return lessons[:]  # "full" ‚Äî –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞


def _create_lessons_by_day(filtered_lessons):
    """
    –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–∞—Ä –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        filtered_lessons (list): –°–ø–∏—Å–æ–∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        dict[int, list]: –ö–ª—é—á ‚Äî –Ω–æ–º–µ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π.
    """

    lessons_by_day = defaultdict(list)
    for l in filtered_lessons:
        if l.weekday is not None:
            lessons_by_day[l.weekday].append(l)
    return lessons_by_day


def _build_schedule_messages(lessons_by_day, format_lesson_func, header: str):
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π).

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        lessons_by_day (dict): –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º –∑–∞–Ω—è—Ç–∏—è.
        format_lesson_func (Callable): –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–π –ø–∞—Ä—ã.
        header (str): –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        list[str]: –°–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    """

    day_texts = []
    for wd in sorted(lessons_by_day.keys()):
        day_lessons = sorted(lessons_by_day[wd], key=lambda x: x.lesson_number or 0)
        day_block = f"üóì *{escape_md_v2(weekday_names[wd])}*:\n" + "\n\n".join(
            format_lesson_func(l) for l in day_lessons) + "\n\n\n"
        day_texts.append(day_block)

    messages = []
    current_text = header
    for day_text in day_texts:
        if len(current_text) + len(day_text) > MAX_MESSAGE_LENGTH:
            messages.append(current_text)
            current_text = day_text
        else:
            current_text += day_text
    if current_text:
        messages.append(current_text)

    return messages


def _get_header(header_prefix: str, week: str):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –Ω–µ–¥–µ–ª–∏.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        header_prefix (str): –ü—Ä–µ—Ñ–∏–∫—Å –∑–∞–≥–æ–ª–æ–≤–∫–∞
        week (str): –¢–∏–ø –Ω–µ–¥–µ–ª–∏ ("plus", "minus", "full").
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        str: –¢–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤ MarkdownV2.
    """

    header_prefix = f"*{escape_md_v2(header_prefix)}*"
    return {
        "plus": f"{header_prefix} ‚ûï\n\n",
        "minus": f"{header_prefix} ‚ûñ\n\n",
        "full": f"{header_prefix}\n\n"
    }.get(week, f"{header_prefix}\n\n")


def _format_common_lesson_data(l):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã (–Ω–æ–º–µ—Ä, –≤—Ä–µ–º—è, –ø—Ä–µ–¥–º–µ—Ç, –∞—É–¥–∏—Ç–æ—Ä–∏—è).

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        l (Lesson): –û–±—ä–µ–∫—Ç –∑–∞–Ω—è—Ç–∏—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        tuple[str, str, str, str, str]:
            (week_marker, emoji_–Ω–æ–º–µ—Ä, –ø—Ä–µ–¥–º–µ—Ç, –∞—É–¥–∏—Ç–æ—Ä–∏—è, –≤—Ä–µ–º—è)
    """

    start, end = _get_lesson_time(lesson_number=l.lesson_number)
    time_str = f"‚è≥ {start} \\- {end}"

    lesson_num = lesson_num_emoji.get(l.lesson_number, "‚ùì")

    rooms_text = l.rooms or "–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    urls = url_pattern.findall(rooms_text)
    if urls:
        rooms_text = url_pattern.sub(lambda m: f"[–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è]({m.group(0)})", rooms_text)
    else:
        rooms_text = escape_md_v2(rooms_text)
    room = f"üìç{rooms_text}"

    subject = escape_md_v2(l.subject or "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω")

    # —É–±—Ä–∞–Ω - ‚ö™
    marker = {"plus": "‚ûï", "minus": "‚ûñ", "every": ""}.get(l.week_mark or "every", "")

    return marker, lesson_num, subject, room, time_str


def format_schedule_students(lessons, week: str, header_prefix: str = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        lessons (list): –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Lesson.
        week (str): –¢–∏–ø –Ω–µ–¥–µ–ª–∏ ("plus", "minus", "full").
        header_prefix (str): –ü—Ä–µ—Ñ–∏–∫—Å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        list[str]: –°–ø–∏—Å–æ–∫ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ MarkdownV2.
    """

    filtered_lessons = _filter_lessons_by_week(lessons, week)
    if not filtered_lessons:
        return []

    def format_lesson(l):
        marker, lesson_num, subject, room, time_str = _format_common_lesson_data(l)

        professors = ", ".join(l.professors) if isinstance(l.professors, list) else (
                    l.professors or "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω")
        professors = escape_md_v2(professors)

        return f"  {lesson_num} {marker} {subject}\n  üë®‚Äçüè´ {professors}\n  {room}\n  {time_str}"

    lessons_by_day = _create_lessons_by_day(filtered_lessons)
    header = _get_header(header_prefix, week)

    return _build_schedule_messages(lessons_by_day, format_lesson, header)


def format_schedule_professor(lessons, week: str, header_prefix: str = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        lessons (list): –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ ProfessorLesson.
        week (str): –¢–∏–ø –Ω–µ–¥–µ–ª–∏ ("plus", "minus", "full").
        header_prefix (str): –ü—Ä–µ—Ñ–∏–∫—Å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        list[str]: –°–ø–∏—Å–æ–∫ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ MarkdownV2.
    """

    filtered_lessons = _filter_lessons_by_week(lessons, week)
    if not filtered_lessons:
        return []

    def format_lesson(l):
        marker, lesson_num, subject, room, time_str = _format_common_lesson_data(l)
        urls = url_pattern.findall(room)
        if urls:
            room = "üìç–û–Ω–ª–∞–π–Ω"
        return f"  {lesson_num} {marker} {subject}\n  {room}\n  {time_str}"

    lessons_by_day = _create_lessons_by_day(filtered_lessons)
    header = _get_header(header_prefix, week)

    return _build_schedule_messages(lessons_by_day, format_lesson, header)